testbench alu_tb {
    sig clk
    
    alu dut()

    fun tick_clock() {
        clk = 1
        $silent_tick() // tick without capturing signals
        clk = 0
        $tick()
    }
    
    fun adder_tests() {
        // Zero tests
        dut.alufn = 6h00
        dut.a = 32hdeadbeef
        dut.b = 32b0
        $tick()
        $assert(dut.out == 32hdeadbeef)
        $assert(dut.z == 0)
        $assert(dut.v == 0)
        $assert(dut.n == 1)
        
        dut.alufn = 6h00
        dut.a = 32b0
        dut.b = 32hdeadbeef
        $tick()
        $assert(dut.out == 32hdeadbeef)
        $assert(dut.z == 0)
        $assert(dut.v == 0)
        $assert(dut.n == 1)
        
        // Add 2 positive, no overflow
        dut.alufn = 6h00
        dut.a = 32h000acade
        dut.b = 32h00f00000
        $tick()
        $assert(dut.out == 32h00facade)
        $assert(dut.z == 0)
        $assert(dut.v == 0)
        $assert(dut.n == 0)
        
        // Add 2 positive, overflowed
        dut.alufn = 6h00
        dut.a = 32h0facade0
        dut.b = 32h7fffffff
        $tick()
        $assert(dut.out == 32h8facaddf)
        $assert(dut.z == 0)
        $assert(dut.v == 1)
        $assert(dut.n == 1)
        
        // Subtract by 0
        dut.alufn = 6h01
        dut.a = 32h0facade0
        dut.b = 32h0
        $tick()
        $assert(dut.out == 32h0facade0)
        $assert(dut.z == 0)
        $assert(dut.v == 0)
        $assert(dut.n == 0)
        
        // Subtract from 0
        dut.alufn = 6h01
        dut.a = 32h0
        dut.b = 32h00facade
        $tick()
        $assert(dut.out == 32hff053522)
        $assert(dut.z == 0)
        $assert(dut.v == 0)
        $assert(dut.n == 1)
        
        // Subtract 2 positive, no negative
        dut.alufn = 6h01
        dut.a = 32h0facade0
        dut.b = 32h00000de0
        $tick()
        $assert(dut.out == 32h0faca000)
        $assert(dut.z == 0)
        $assert(dut.v == 0)
        $assert(dut.n == 0)
    }

    test myTest {
        // Init
        dut.alufn = 6b0
        dut.a = 32b0
        dut.b = 32b0
        
        clk = 0 // initialize the value
        $tick() // capture initial state

        // Testing
        $adder_tests()
        
        
        
        
    }
}