// IMPLEMENTED and VALIDATED

module x_bit_left_shifter #(
  // parameter declaration, to be set during module instantiation
  // default value given is 8
  SHIFT = 8 : SHIFT > -1 & SHIFT < 32
  )(
      input a[32], // Actual input
      input shift, // Whether this unit will (1) or will not shift (0)
      input pad,   // Pad the new value with either 0 or 1
      output out[32]
  ) {
  
    // module declarations
    // instantiate mux_2 (32 of them)
    mux_2 mux_2s[32]
    // other useful intermediary signals, e.g: shifted_bits[32] 
    sig shifted_bits[32]
  
    always {
        // assign value to shifted_bits[32] depending on the value of SHIFT
        // This is the actual unit that does fixed shifting
        shifted_bits = c{a[31-SHIFT:0], SHIFTx{pad}}
                
        // use a repeat-loop to: 
        // connect input[0] of each mux_2 with a[i]
        // connect the selector of each mux_2 with shift 
        // connect input[1] of each mux_2 with the shifted_bits[i] 
        repeat(i, 32) {
            mux_2s.s0[i] = shift
            mux_2s.in[i][0] = a[i]
            mux_2s.in[i][1] = shifted_bits[i]
        }
        
        // connect output
        out = mux_2s.out
    }
}