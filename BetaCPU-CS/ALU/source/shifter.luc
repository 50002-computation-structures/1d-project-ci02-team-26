module shifter (
    input a[32],
    input b[5],
    input alufn[6], // 00: shift left, 01: shift right, 11: shift right arithm
    output shift[32]
) {
    mux_4 output_multiplexer[32]()
    
    // Make 5 left shifters with different bits in powers of 2, with the LSB being a 1 bit and MSB being 16 bits
    x_bit_left_shifter left_shifters[5](#SHIFT({5d16,5d8,5d4,5d2,5d1}))
    x_bit_right_shifter right_shifters[5](#SHIFT({5d16,5d8,5d4,5d2,5d1}))
    x_bit_right_shifter_arith right_shifters_arith[5](#SHIFT({5d16,5d8,5d4,5d2,5d1}))

    always {
        // Multiplex the output depending on the 2 LSBs of ALUFN        
        shift = output_multiplexer.out
        repeat (i, 32) {
            output_multiplexer.s0[i] = alufn[0]
            output_multiplexer.s1[i] = alufn[1]
            output_multiplexer.in[i][0] = left_shifters.out[0][i]
            output_multiplexer.in[i][1] = right_shifters.out[0][i]
            output_multiplexer.in[i][2] = 1bx
            output_multiplexer.in[i][3] = right_shifters_arith.out[0][i]
        }
        
        // Map b to shift
        left_shifters.shift = b
        right_shifters.shift = b
        right_shifters_arith.shift = b
        
        // Disable padding for all shifters
        left_shifters.pad = 5b0
        right_shifters.pad = 5b0
        
        repeat (i, 5) { // 0 to 4
            if (i == 0) { // LSB, last one in the chain                
                left_shifters.a[i] = left_shifters.out[i+1]
                right_shifters.a[i] = right_shifters.out[i+1]
                right_shifters_arith.a[i] = right_shifters_arith.out[i+1]
            }
            else if (i == 4) { // MSB, first in the chain
                left_shifters.a[i] = a
                right_shifters.a[i] = a
                right_shifters_arith.a[i] = a
                
                left_shifters.a[i-1] = left_shifters.out[i]
                right_shifters.a[i-1] = right_shifters.out[i]
                right_shifters_arith.a[i-1] = right_shifters_arith.out[i]
            }
            else {
                left_shifters.a[i] = left_shifters.out[i+1]
                right_shifters.a[i] = right_shifters.out[i+1]
                right_shifters_arith.a[i] = right_shifters_arith.out[i+1]
            }
        }
    } 
}