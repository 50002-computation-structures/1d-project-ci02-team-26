module led_unit (
    input clk,  // clock
    input rst,  // reset
    input rx[4][32], // display buffer from regfile
    input mode[3],   // mode of display, 0 means default regfile based, 1 means ROM1, 2 means ROM2 and so on
    output data
) {
    
    const BUFFER_SIZE = 480; // ensure this value is larger than PIXEL_COUNT * $clog2(COLOR_ENCODING)
    const COLOR_ENCODING = {24h0000FF, 24hFF0000, 24h00FF00, 24h0} // GREEN (01), BLUE (10), RED (11), OFF (00)

    // Starting screen ROM
    const START_ROM = $reverse({
         2b10, 2b11, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b00,
         2b01, 2b00, 2b01, 2b00, 2b01, 2b00, 2b01, 2b10
    }) // 120 entries here

    // Winning screen ROM
    const WIN_ROM = $reverse({
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b01, 2b10, 2b11, 2b10, 2b01, 2b10, 2b01, 2b11
    }) // 120 entries here

    // Losing screen ROM
    const LOSE_ROM = $reverse({
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b01, 2b00, 2b00, 2b00, 2b00, 2b01, 2b00,
         2b00, 2b00, 2b01, 2b00, 2b00, 2b01, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b01, 2b01, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b01, 2b00, 2b00, 2b01, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00,
         2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00, 2b00
    }) // 120 entries here
    
    sig pixel_address[BUFFER_SIZE]  // rx0
    sig pixel1_address[BUFFER_SIZE] // rx1, subtracted
    sig pixel2_address[BUFFER_SIZE] // rx2, subtracted
    sig pixel3_address[BUFFER_SIZE] // rx3, subtracted
    
    ws2811_driver driver(#PIXEL_COUNT(120), .clk(clk), .rst(rst)) // 15 x 8 = 120
    
    dff rx_reg_counter[2](#INIT(0), .clk(clk), .rst(rst))  // reg 0 to 3
    dff rx_byte_counter[2](#INIT(0), .clk(clk), .rst(rst)) // bytes 0 to 3
    
    dff driver_update_flag(#INIT(1), .clk(clk), .rst(rst))
    
    index_reverser index_reverser(#COLUMN_DIMENSION(8), #SIZE($clog2(120)))
    
    always {
        // LED driver
        driver.clear = 0
        driver.color = 0
        
        // Index reverser
        index_reverser.input_address = driver.pixel_address
        
        // LED driver output!
        data = ~driver.data //TODO: invert this signal because we're using a NOT gate as a voltage level shifter!
        
        // Feedback loop 1: this pixel address comes FROM the driver, which has to be interpreted by the
        // associated circuitry implementing it
        //pixel_address = driver.pixel_address
        pixel_address = index_reverser.output_address
        driver_update_flag.d = driver_update_flag.q
        
        driver.update = driver_update_flag.q // TODO: have something external enable driver_update?
        
        // Feedback loop 2: the color is then specified by the display memory based on the current pixel address the driver is trying
        // to fetch from. You can process the data in a specific way before handing it to the driver like the commented line below
        //driver.color = COLOR_ENCODING[DISPLAY[$resize(pixel_address, $clog2($width(DISPLAY, 0)))]]
        
        rx_reg_counter.d = rx_reg_counter.q
        rx_byte_counter.d = rx_byte_counter.q
        
        // Convert pixel address (0 to 120) to rows and columns
        // if pixel_address >= 0 and < 32, register rx0
        // if pixel_address >= 32 and < 64, register rx1
        // if pixel_address >= 64 and < 96, register rx2
        // if pixel_address >= 96 and < 128, register rx3
        pixel1_address = pixel_address - 32
        pixel2_address = pixel_address - 64
        pixel3_address = pixel_address - 96
        
        // Regfile based
        if (mode == 0) {
            if (pixel_address >= 0 && pixel_address < 32) {
                driver.color = COLOR_ENCODING[rx[0][$resize(pixel_address, $clog2(32))]]
            } else if (pixel_address >= 32 && pixel_address < 64) {
                // driver.color is 24 bits COLOUR_ENCODING outputs 24 bits
                // rx[1][31:0] gives you a full 32 bits representing 4 rows worth of data
                driver.color = COLOR_ENCODING[rx[1][$resize(pixel1_address, $clog2(32))]]
            } else if (pixel_address >= 64 && pixel_address < 96) {
                driver.color = COLOR_ENCODING[rx[2][$resize(pixel2_address, $clog2(32))]]
            } else if (pixel_address >= 96 && pixel_address < 128) {
                driver.color = COLOR_ENCODING[rx[3][$resize(pixel3_address, $clog2(32))]]
            }
        } 
        // ROM based
        else if (mode == 1) {
            driver.color = COLOR_ENCODING[START_ROM[$resize(pixel_address, $clog2(120))]]
        } else if (mode == 2) {
            driver.color = COLOR_ENCODING[WIN_ROM[$resize(pixel_address, $clog2(120))]]
        } else if (mode == 3) {
            driver.color = COLOR_ENCODING[LOSE_ROM[$resize(pixel_address, $clog2(120))]]
        }
        // Final error condition if mode is set wrong: set all to white (with 50% brightness)
        else {
            driver.color = 24h696969
        }
    }
}
