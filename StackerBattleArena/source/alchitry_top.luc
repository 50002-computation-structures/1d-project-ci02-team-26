module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8],     // DIP switches on IO Shield
    output data             // WS2811 data output
) {

    sig rst                 // reset signal
    
    sig asel[3]
    sig bsel[2]            // asel and bsel signals
    sig wdsel              // wdsel signal
    sig rowshft[6]         // special rowshift value
    
    sig alufn[6]
    
    alu alu()
    control_unit control_unit(.rst(rst))
    
    const CLK_FREQ = $is_sim() ? 1000 : 100_000_000

    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        // TODO: change the input of this button conditioner to the actual button!
        button_conditioner action_btn_conditioner(#CLK_FREQ(CLK_FREQ), .in(io_button[1]))
        edge_detector action_btn_edge(#RISE(1), #FALL(0), .in(action_btn_conditioner.out))
        
        .rst(rst) {
            regfile_unit regfile()
            clocks clocks()
            led_unit led_unit()
        }
    }
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        led = 8h00              // turn LEDs off
        usb_tx = usb_rx         // loop serial port
        io_led = 3x{{8h00}}
        io_segment = 8hff
        io_select = 4hf
        
        // TODO: DELETE THIS WHEN YOU ACTUALLY HAVE THE SIGNALS
        asel = 0
        bsel = 0
        wdsel = 0
        rowshft = 0
        alufn = 0
        regfile.wa = 0
        regfile.wd = 0
        regfile.we = 0
        regfile.ra1 = 0
        regfile.ra2 = 0
        regfile.rxc = 0
        
        // Debug LEDs
        io_led[0] = alu.out[7:0]
        
        // Clock signal, which depends on register R0 (row height)
        clocks.r0 = regfile.r0
        
        // Control Unit!!
        control_unit.clk_game = clocks.clk_game
        control_unit.clk_oscillate = clocks.clk_oscillate
        control_unit.r0 = regfile.r0
        control_unit.rd1 = regfile.rd1
        control_unit.action_btn = action_btn_edge.out
        
        // ALU
        alu.alufn = alufn
        
        // ALU input selectors ASEL and BSEL
        case (asel) {
            0: alu.a = regfile.rd1
            1: alu.a = 32h00000000
            2: alu.a = 32h00000001
            3: alu.a = 32h0000000f
            4: alu.a = 32h000000ff
            default: alu.a = 0
        }
        case (bsel) {
            0: alu.b = regfile.rd2
            1: alu.b = 32h00000000
            2: alu.b = 32h00000001
            3: alu.b = rowshft
            default: alu.b = 0
        }
        
        // ALU output selector WDSEL
        case (wdsel) {
            0: regfile.wd = alu.out
            1: regfile.wd = 0
        }
        
        // LED unit output
        data = led_unit.data
    }
}