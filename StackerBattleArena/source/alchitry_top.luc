module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8],     // DIP switches on IO Shield
    output data             // WS2811 data output
) {

    sig rst                 // reset signal
    
    alu alu()
    control_unit control_unit(.clk(clk), .rst(rst))
    
    const CLK_FREQ = $is_sim() ? 1000 : 10_000_000

    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        // TODO: change the input of this button conditioner to the actual button!
        button_conditioner action_btn_conditioner(#CLK_FREQ(CLK_FREQ), .in(io_button[1]))    // centre button
        edge_detector action_btn_edge(#RISE(1), #FALL(0), .in(action_btn_conditioner.out))
        
        // Buttons for simulating clock inputs
        button_conditioner clkosc_btn_conditioner(#CLK_FREQ(CLK_FREQ), .in(io_button[0]))    // top button
        edge_detector clkosc_btn_edge(#RISE(1), #FALL(0), .in(clkosc_btn_conditioner.out))
        
        button_conditioner clkgame_btn_conditioner(#CLK_FREQ(CLK_FREQ), .in(io_button[2]))   // down button
        edge_detector clkgame_btn_edge(#RISE(1), #FALL(0), .in(clkgame_btn_conditioner.out))
        
        // button 3 is left, 4 is right
        
        .rst(rst) {
            regfile_unit regfile()
            clocks clocks(.r0(regfile.r0)) // Clock signal, which depends on register R0 (row height)
            led_unit led_unit(.rx(regfile.rx), .mode(control_unit.ledmode))
            
            // Serial debugger
            uart_tx tx(#BAUD(1_000_000), #CLK_FREQ(100_000_000), 
                .block(0), 
                .new_data(control_unit.new_tx), 
                .data(control_unit.tx_data))
        }
    }
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        led = 8h00              // turn LEDs off
        io_led = 3x{{8h00}}
        io_segment = 8hff
        io_select = 4hf
        
        // Serial debugger
        control_unit.tx_busy = tx.busy
        usb_tx = tx.tx
        
        // Debug LEDs
        io_led[0] = regfile.rx[0][7:0]
        //io_led[0] = regfile.r1[7:0]  // temporarily use r1 as it reflects the internal state without the display buffer :)
        io_led[1] = regfile.rx[0][15:8]
        io_led[2] = regfile.rx[0][23:16]
        
        // Control Unit!!
        if (io_dip[0][0]) {
            // If first dip switch is activated, use real clock. Note that these clocks are only the rising edges!
            control_unit.clk_game = clocks.clk_game
            //control_unit.clk_game = clkgame_btn_edge.out
            control_unit.clk_oscillate = clocks.clk_oscillate
        } else {
            control_unit.clk_game = clkgame_btn_edge.out
            control_unit.clk_oscillate = clkosc_btn_edge.out
        }
        control_unit.r0 = regfile.r0
        control_unit.rd1 = regfile.rd1
        control_unit.action_btn = action_btn_edge.out
        control_unit.shift_ok = regfile.shift_ok
        regfile.wa = control_unit.wa
        regfile.we = control_unit.we
        regfile.ra1 = control_unit.ra1
        regfile.ra2 = control_unit.ra2
        regfile.rxc = control_unit.rxc
        
        // ALU
        alu.alufn = control_unit.alufn
        
        // ALU input selectors ASEL and BSEL
        case (control_unit.asel) {
            0: alu.a = regfile.rd1
            1: alu.a = 32h00000000
            2: alu.a = 32h00000001
            3: alu.a = 32h0000000f
            4: alu.a = 32h000000ff
            default: alu.a = 0
        }
        case (control_unit.bsel) {
            0: alu.b = regfile.rd2
            1: alu.b = 32h00000000
            2: alu.b = 32h00000001
            3: alu.b = control_unit.rowshft
            4: alu.b = control_unit.rowreg
            5: alu.b = control_unit.rowmask
            default: alu.b = 0
        }
        
        // ALU output selector WDSEL
        case (control_unit.wdsel) {
            0: regfile.wd = alu.out
            default: regfile.wd = 0
        }
        
        // LED unit output
        data = led_unit.data
    }
}