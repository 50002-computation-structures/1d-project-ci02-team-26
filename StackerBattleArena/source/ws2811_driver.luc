/* 
    WS2811 Driver for 100 MHz Clock

    It outputs current pixel_address, and you need to feed in the color (24 bits) for this current pixel_address

    Color setup: 24-bit color: B0 B1 B2 B3 B4 B5 B6 B7 R0 R1 R2 R3 R4 R5 R6 R7 G0 G1 G2 G3 G4 G5 G6 G7 
    - WS2812B expects the first 8 bits sent to be G, then R (next 8), then B (the following 8 thereafter)
    - Hence, we need to pack the 8 bits for G in the lower bits, then R, then B as the highest 8 bits in Lucid
    - Note that the high bit is B7, and the low bit is B0 for the 8-bit color BLUE (same with red and green)

    For example: if you want the color NAVY, you will find that B should be 0x80. 
    This means B7 is 1 and you need to flip it in BINARY for Lucid to work, effectively having 0x01 for BLUE part.
    
    Original version by Prof Nat https://github.com/natalieagus/ws2812b-v2
    Modified version for WS2811 protocol timings by Ziyue https://github.com/d3lta-v
*/
module ws2811_driver #(
    PIXEL_COUNT = 256 : PIXEL_COUNT > 0  		// The number of LEDs in the chain.
)(
    input clk,  // clock
    input rst,  // reset
    input update, // feed '1' to update the display with new 'color', if '0' then it will stay displaying its old value
    input color[24], // BRG, 8 bits each, color to render for all LED
    input clear, // this will clear the LED matrix regardless of update 
    output pixel_address[$clog2(PIXEL_COUNT)],  // Index of the LED, with the color in color[24]. clog2(32) = 5 -> 2^5 = 32
    output data,		//Goes to the first LED in the chain
    output next_pixel, // this turns to 1 for 1 FPGA clock cycle each time we are done with writing a pixel 
    output reset, // this turns to 1 when we are at RESET state
    output done // this turns to 1 once we have refreshed all pixels in the LED
) {
    
    enum States {
        SEND_PIXEL,
        RESET,
        CLEAR
    }
    
    .clk(clk) {
        .rst(rst) {
            dff state[$width(States)](#INIT(States.RESET)) // start at RESET state, don't show anything yet
            dff pixel_address_counter[$clog2(PIXEL_COUNT)](#INIT(0))
            dff bit_counter[5]
            dff ctr[7]
            dff reset_counter [$clog2(28000)] // reset requires 50us of zeroes on WS2812, 280us on WS2811
            dff update_request(#INIT(0)) // to store update request so we don't miss it 
            dff clear_request(#INIT(1)) // to store clear request so we don't miss it, initialised to 1 so we always clear LED upon boot
        }
    }
    
    always {
        data = 0
        reset = 0 // not resetting by default
        next_pixel = 0 // not done with any pixel
        
        // dff connections
        reset_counter.d = reset_counter.q
        pixel_address_counter.d = pixel_address_counter.q
        state.d = state.q
        bit_counter.d = bit_counter.q 
        ctr.d = ctr.q 
        update_request.d = update_request.q
        clear_request.d = clear_request.q
        pixel_address = pixel_address_counter.q
        
        if (~update_request.q){ // if update_request == LOW, set it to the current update input
            update_request.d = update 
        }
        
        if (~clear_request.q){ // if clear_request == LOW, set it to the current clear input
            clear_request.d = clear 
        }
        
        done = 0
        
        case (state.q) {
            States.SEND_PIXEL:
                // This is a nice hack: ctr is a generic dff counter with 0-127 values
                // By simply setting the data pin to a comparison of this dff counter, this
                // enables the timing to be controlled in a very fine grained manner.
                // The counter's max is also capped at 125 to achieve the correct timing
                if (color[bit_counter.q]) // if current bit is HIGH, send 80 1's and 45 0's
                    data = ctr.q < 58
                else // if current bit is LOW, send 40 1's, and 85 0's
                    data = ctr.q < 22
                
                ctr.d = ctr.q + 1

                // Counter has depleted meaning the current bit has been sent
                if (ctr.q == 116){ // check if you can send next bit 
                    ctr.d = 0
                    
                    bit_counter.d = bit_counter.q + 1
                    if (bit_counter.q == 23) { // check if you have sent all 24 bits 
                        bit_counter.d = 0 // reset bit counter 
                        next_pixel = 1 // safe to change pixel
                        pixel_address_counter.d = pixel_address_counter.q + 1 // advance pixel counter
                        // The moment all LEDs (according to PIXEL_COUNT) have received their RGB values, go to
                        // RESET state and set done=1 to indicate all pixels have been refreshed before
                        if (pixel_address_counter.q == PIXEL_COUNT-1) { // check if you have sent data to all LEDs
                            done = 1
                            state.d = States.RESET
                        }
                    }
                }
            
            States.RESET:
                // this resets the contents of the shift registers after we have latched all the pixel values 
                reset = 1
                // if contents of reset_counter.q is all 1, we choose what to do: 
                // - remain at RESET and let LEDs display old values, or 
                // - refresh our LEDs with new values
                if (&reset_counter.q) { 
                    if (update_request.q) {
                        update_request.d = 0 // clear the update request
                        reset_counter.d = 0
                        pixel_address_counter.d = 0 // reset pixel counter
                        state.d = States.SEND_PIXEL // go back to update the entire strip again 
                    }
                    
                    // if both update and clear is 1, then clear will take priority
                    // it will also clear update_request although CLEAR and not SEND_PIXEL is executed
                    if (clear_request.q){
                        clear_request.d = 0 // clear the clear request
                        reset_counter.d = 0
                        pixel_address_counter.d = 0 // reset pixel counter
                        state.d = States.CLEAR // send all 0s
                    }
                } 
                
                else {
                    // still at reset, continue
                    reset_counter.d = reset_counter.q + 1
                }
            
            States.CLEAR:
                // send 40 1's, and 85 0's
                data = ctr.q < 22
                
                ctr.d = ctr.q + 1
                if (ctr.q == 116){ // check if you can send next bit 
                    ctr.d = 0
                    
                    bit_counter.d = bit_counter.q + 1
                    if (bit_counter.q == 23) { // check if you have sent all 24 bits 
                        bit_counter.d = 0 // reset bit counter 
                        pixel_address_counter.d = pixel_address_counter.q + 1 // advance pixel counter
                        if (pixel_address_counter.q == PIXEL_COUNT-1) { // check if you have sent data to all LEDs
                            state.d = States.RESET
                        }
                    }
                }
        }
        
    }
}