module instruction_rom #(
    WORDS = 16 // total instructions in this ROM
)(
    input addr[$clog2(WORDS)], // this ROM is WORD addressable
    output out[32],
output numinstr[10]
) {
    
    // Driver code, the bottommost instruction is the first instruction
    // CHECKOFF: write your own test instruction fulfilling the requirements written in the lab handout
    const INSTRUCTIONS = {    
 
     32h7BE4FFF7, // 0x20 BNE(R4, 0, R31) If R4 != 0, return to 0x000 
     32h6CE70000, // 0x01C JMP(R7, R7) Stores next instruction into R7, returns to EA 0x000 with supervisor bit cleared, 
                  // next cycle JMP(R7, R7) will go to 0x020 with cleared supervisor bit in future cycles
     32h64DF0030, // 0x018 ST(R6,48,R31)  Replaces EA 0x030 with content of R6 (32h80611000)
     32h60C10005, // 0x014 LD(R1, 5, R6)  Stores instruction 32h80611000 into R6  
     32h90A11800, // 0x010 CMPEQ(R1, R3, R5) Compares R1 and R3, returns 0, stored in R5
     32h90810800, // 0x00C CMPEQ(R1, R1, R4) Compares R1 and R1, returns 1, stored in R4
     32h80611000, // 0x008 ADD(R1,R2,R3) Stores 3 + 2 = 5 into R3
     32hC05F0002, // 0x004 ADDC(R31, 2, R2) Stores 0 + 2 = 2 into R2
     32hC03F0003 // 0x000 ADDC(R31, 3, R1) Stores 0 + 3 = 3 into R1
   
    }
    
    const NUM_OF_INSTRUCTIONS = $width(INSTRUCTIONS,0) // compute how many instructions are there
    
    always {
        if (addr < NUM_OF_INSTRUCTIONS){ // check if addr < number of instructions before slicing the array
            out = INSTRUCTIONS[addr]
        }
        else{
            out = 0
        }
        numinstr = NUM_OF_INSTRUCTIONS
    }
}