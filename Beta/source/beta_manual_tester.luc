// Supervisor bit is present, supervisor mode on
// Sequence is: 
//0x000 C03F0003 ADDC(R31, 3, R1)    Add R31(0) and 3, store into R1
//0x004 C05F0002 ADDC(R31, 2, R2)    Add R31(0) and 2, store into R2
//0x008 80611000 ADD(R1, R2, R3)     Add R1(3) and R2(2), store into R3
//0x00C 90810800 CMPEQ(R1, R1, R4)   Compare R1(3) and R1(3), return 0
//0x010 90A11800 CMPEQ(R1, R3, R5)   Compare R1(3) and R3(5), return 0
//0x014 60C10005 LD(R1,5,R6)         Instruction 32h80611000 loaded into R6
//0x018 64DF0030 ST(R6, 48, R31)     Instruction 32h80611000 from R6 stored in 0x030
//0x01C 6CE70000 JMP(R7,R7) Supervisor bit cleared, user mode on, return to 0x000
//0x000 C03F0003 ADDC(R31, 3, R1)    Add R31(0) and 3, store into R1
//0x004 C05F0002 ADDC(R31, 2, R2)    Add R31(0) and 2, store into R2
//0x008 80611000 ADD(R1, R2, R3)     Add R1(3) and R2(2), store into R3
//0x00C 90810800 CMPEQ(R1, R1, R4)   Compare R1(3) and R1(3), return 0
//0x010 90A11800 CMPEQ(R1, R3, R5)   Compare R1(3) and R3(5), return 0
//0x014 60C10005 LD(R1,5,R6)         Instruction 32h80611000 loaded into R6
//0x018 64DF0030 ST(R6, 48, R31)     Instruction 32h80611000 from R6 stored in 0x030
//0x01C 6CE70000 JMP(R7,R7)          Supervisor bit already cleared
//0x020 7BE4FFF7 BNE(R4, 0, R31)     Repeat from line 11





module beta_manual_tester#(
    CLK_FREQ ~ 1000 : CLK_FREQ > 0)  
(
    input clk,              // 25MHz clock
    input rst,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output io_led [3][8],   // LEDs on IO Shield
    output io_segment [8],      // 7-segment LEDs on IO Shield
    output io_select [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    // Serial port
    output new_tx,     // new TX flag
    output tx_data[8], // TX data
    input tx_busy      // TX is busy flag
) {
    
    // helper signals
    sig next                 // next instruction signal
    sig debug_pcsel[16]
    sig debug_asel[16]
    sig debug_bsel[16]
    sig debug_wdsel[16]
    
    // motherboard
    motherboard motherboard(.clk(clk), .rst(rst))
    
    button_conditioner next_button_conditioner(#CLK_FREQ(CLK_FREQ), .clk(clk))
    edge_detector next_button_edge(#RISE(1), #FALL(0), .clk(clk))
    
    // interrupt button conditioners, edge detector, and input buffer
    button_conditioner interrupt_button_conditioner[3](.clk(3x{clk}), #CLK_FREQ(3x{{$resize(CLK_FREQ,32)}})) 
    edge_detector interrupt_button_edge[3](#RISE(3x{{1}}), #FALL(3x{{0}}), .clk(3x{clk}))
    
    // to run beta at slower clock than FPGA clock
    counter frequency_divider(#SIZE(28), .clk(clk), .rst(rst))
    edge_detector slowclock_edge(#RISE(1), #FALL(0), .clk(clk))
    edge_detector fastclock_edge(#RISE(1), #FALL(0), .clk(clk)) 
    
    // DISPLAY (for easy debugging)
    multi_seven_seg seg(.clk(clk),.rst(rst), #DIV($is_sim() ? 5 : 16)) // put div 5 for sim
        
    // serial port debugger
    enum States {IDLE, TRANSMIT}
    const BUFFER_LEN = 122
    bin_to_hex_ascii bin2hex()
    
    .clk(clk) {
	        .rst(rst) {
	            dff state[$width(States)]
	        }
	        dff count[$clog2(BUFFER_LEN)](#INIT(0)) // buffer counter
	    }
    
    always {
        io_led = 3x{{h00}}       // turn all LED off at first
        io_segment = 8hff // connect segments to the driver
        io_select = 4hf // connect digit select to the driver
        
        led = c{3b0, io_button}  // connect buttons to LEDs
        
        io_led[2][7] = io_dip[2][7] // see toggle manual/auto mode
        io_led[2][6] = io_dip[2][6] // see toggle fastclock 
        io_led[2][5] = frequency_divider.value[27] 
        io_led[2][4] = frequency_divider.value[8]  
        
        // next button
        next_button_conditioner.in = io_button[4]
        next_button_edge.in = next_button_conditioner.out
        
        // driving the beta 
        slowclock_edge.in = frequency_divider.value[27]
        fastclock_edge.in = frequency_divider.value[8] // for simulation, because we work with 1000Hz clock
        
        // connect hardware interrupt button 
        interrupt_button_conditioner.in = io_button[2:0]
        interrupt_button_edge.in = interrupt_button_conditioner.out
        motherboard.irq = interrupt_button_edge.out // IRQ as long as any of of the buttons[2:0] is pressed
        
        next = (slowclock_edge.out & io_dip[2][7]) | next_button_edge.out // proceed either when next button is pressed or io_dip[2][7] is 1
        
        if (io_dip[2][6]){ // want faster clock
            next = (fastclock_edge.out & io_dip[2][7]) | next_button_edge.out
        }
        
        motherboard.slowclk = next
        
        // debugger to view Beta state    
        // set default values for 7 seg before overwriting it based on io_dip below
        seg.values = {4b0,4b0,4b0,4b0}
        io_segment = ~seg.seg
        io_select = ~seg.sel
        
        debug_pcsel = motherboard.debug[0]
        debug_asel = motherboard.debug[1]
        debug_bsel = motherboard.debug[2]
        debug_wdsel = motherboard.debug[3]
        
        case (io_dip[0]){
            h00: // MSB 16 bits of current instruction (id[31:16])
                io_led[0] = motherboard.id[23:16]
                io_led[1] = motherboard.id[31:24]
                seg.values = {motherboard.id[31:28], motherboard.id[27:24], motherboard.id[23:20], motherboard.id[19:16]}
            h01: // LSB 16 bits of current instruction (id[15:0])
                io_led[0] = motherboard.id[7:0]
                io_led[1] = motherboard.id[15:8]
                seg.values = {motherboard.id[15:12], motherboard.id[11:8], motherboard.id[7:4], motherboard.id[3:0]} 
            h02: // LSB 16 bits of instruction address (ia[15:0])
                io_led[0] = motherboard.ia[7:0]
                io_led[1] = motherboard.ia[15:8]
                seg.values = {motherboard.ia[15:12], motherboard.ia[11:8], motherboard.ia[7:4], motherboard.ia[3:0]}
            h03: // LSB 16 bits of EA (this is also ALU output) (ma[15:0])
                io_led[0] = motherboard.ma[7:0]
                io_led[1] = motherboard.ma[15:8]
                seg.values = {motherboard.ma[15:12], motherboard.ma[11:8],motherboard.ma[7:4], motherboard.ma[3:0]}
            h04: // MSB 16 bits of EA (this is also ALU output) (ma[31:16])
                io_led[0] = motherboard.ma[23:16]
                io_led[1] = motherboard.ma[31:24]
                seg.values = {motherboard.ma[31:28], motherboard.ma[27:24], motherboard.ma[23:20], motherboard.ma[19:16]} 
            h05: // LSB 16 bits of Mem[EA] (mrd[15:0])
                io_led[0] = motherboard.mrd[7:0]
                io_led[1] = motherboard.mrd[15:8]
                seg.values = {motherboard.mrd[15:12], motherboard.mrd[11:8], motherboard.mrd[7:4], motherboard.mrd[3:0]} 
            h06: // MSB 16 bits of Mem[EA] (mrd[31:16])
                io_led[0] = motherboard.mrd[23:16]
                io_led[1] = motherboard.mrd[31:24]
                seg.values = {motherboard.mrd[31:28], motherboard.mrd[27:24], motherboard.mrd[23:20], motherboard.mrd[19:16]} 
            h07: // LSB 16 bits of RD2 (mwd[15:0]) 
                io_led[0] = motherboard.mwd[7:0]
                io_led[1] = motherboard.mwd[15:8]
                seg.values = {motherboard.mwd[15:12], motherboard.mwd[11:8],motherboard.mwd[7:4], motherboard.mwd[3:0]}
            h08: // MSB 16 bits of RD2 (mwd[31:16])
                io_led[0] = motherboard.mwd[23:16]
                io_led[1] = motherboard.mwd[31:24]
                seg.values = {motherboard.mwd[31:28], motherboard.mwd[27:24], motherboard.mwd[23:20], motherboard.mwd[19:16]}
            h09: // LSB 16 bits of pcsel_out
                io_led[0] = debug_pcsel[7:0]
                io_led[1] = debug_pcsel[15:8]
                seg.values = {debug_pcsel[15:12], debug_pcsel[11:8], debug_pcsel[7:4], debug_pcsel[3:0]}
            h_0a: // LSB 16 bits of asel_out
                io_led[0] = debug_asel[7:0]
                io_led[1] = debug_asel[15:8]
                seg.values = {debug_asel[15:12], debug_asel[11:8], debug_asel[7:4], debug_asel[3:0]}
            h_0b: // LSB 16 bits of bsel_out
                io_led[0] = debug_bsel[7:0]
                io_led[1] = debug_bsel[15:8]
                seg.values = {debug_bsel[15:12], debug_bsel[11:8], debug_bsel[7:4], debug_bsel[3:0]}
            h_0c: // LSB 16 bits of wdsel_out
                io_led[0] = debug_wdsel[7:0]
                io_led[1] = debug_wdsel[15:8]
                seg.values = {debug_wdsel[15:12], debug_wdsel[11:8], debug_wdsel[7:4], debug_wdsel[3:0]}
            h_0d: // MSB 16 bits of instruction address. Useful to see PC31 (kernel/user mode) (ia[31:16])
                io_led[0] = motherboard.ia[31:24]
                io_led[1] = motherboard.ia[23:16]
                seg.values = {motherboard.ia[31:28], motherboard.ia[27:24], motherboard.ia[23:20], motherboard.ia[19:16]} 
            h_0e: // LSB 16 bits of system_input_buffer 
                io_led[1:0] = {motherboard.input_buffer[15:8], motherboard.input_buffer[7:0]}
                seg.values = {motherboard.input_buffer[15:12], motherboard.input_buffer[11:8], motherboard.input_buffer[7:4], motherboard.input_buffer[3:0]} 
            h_0f: // LSB 16 bits of system_output_buffer 
                io_led[1:0] = {motherboard.output_buffer[15:8], motherboard.output_buffer[7:0]}
                seg.values = {motherboard.output_buffer[15:12], motherboard.output_buffer[11:8], motherboard.output_buffer[7:4],motherboard.output_buffer[3:0]} 
        }
        
        // serial debugger
        new_tx = 0 // default to 0
        bin2hex.bin = 0
        
        // Leave blank entry for space character
        case (count.q) {
            0: tx_data = "i"
            1: tx_data = "d"
            2: tx_data = ":"
            
            4: bin2hex.bin = motherboard.id[31:28]; tx_data = bin2hex.out;
            5: bin2hex.bin = motherboard.id[27:24]; tx_data = bin2hex.out;
            6: bin2hex.bin = motherboard.id[23:20]; tx_data = bin2hex.out;
            7: bin2hex.bin = motherboard.id[19:16]; tx_data = bin2hex.out;
            8: bin2hex.bin = motherboard.id[15:12]; tx_data = bin2hex.out;
            9: bin2hex.bin = motherboard.id[11:8]; tx_data = bin2hex.out;
            10: bin2hex.bin = motherboard.id[7:4]; tx_data = bin2hex.out;
            11: bin2hex.bin = motherboard.id[3:0]; tx_data = bin2hex.out;
            12: tx_data = "\n"
            13: tx_data = "i"
            14: tx_data = "a"
            15: tx_data = ":"
            
            17: bin2hex.bin = motherboard.ia[31:28]; tx_data = bin2hex.out;
            18: bin2hex.bin = motherboard.ia[27:24]; tx_data = bin2hex.out;
            19: bin2hex.bin = motherboard.ia[23:20]; tx_data = bin2hex.out;
            20: bin2hex.bin = motherboard.ia[19:16]; tx_data = bin2hex.out;
            21: bin2hex.bin = motherboard.ia[15:12]; tx_data = bin2hex.out;
            22: bin2hex.bin = motherboard.ia[11:8]; tx_data = bin2hex.out;
            23: bin2hex.bin = motherboard.ia[7:4]; tx_data = bin2hex.out;
            24: bin2hex.bin = motherboard.ia[3:0]; tx_data = bin2hex.out;
            26: tx_data = "\n"
            27: tx_data = "m"
            28: tx_data = "a"
            29: tx_data = ":"
            
            31: bin2hex.bin = motherboard.ma[31:28]; tx_data = bin2hex.out;
            32: bin2hex.bin = motherboard.ma[27:24]; tx_data = bin2hex.out;
            33: bin2hex.bin = motherboard.ma[23:20]; tx_data = bin2hex.out;
            34: bin2hex.bin = motherboard.ma[19:16]; tx_data = bin2hex.out;
            35: bin2hex.bin = motherboard.ma[15:12]; tx_data = bin2hex.out;
            36: bin2hex.bin = motherboard.ma[11:8]; tx_data = bin2hex.out;
            37: bin2hex.bin = motherboard.ma[7:4]; tx_data = bin2hex.out;
            38: bin2hex.bin = motherboard.ma[3:0]; tx_data = bin2hex.out;
            39: tx_data = "\n"
            40: tx_data = "m"
            41: tx_data = "r"
            42: tx_data = "d"
            43: tx_data = ":"
            
            45: bin2hex.bin = motherboard.mrd[31:28]; tx_data = bin2hex.out;
            46: bin2hex.bin = motherboard.mrd[27:24]; tx_data = bin2hex.out;
            47: bin2hex.bin = motherboard.mrd[23:20]; tx_data = bin2hex.out;
            48: bin2hex.bin = motherboard.mrd[19:16]; tx_data = bin2hex.out;
            49: bin2hex.bin = motherboard.mrd[15:12]; tx_data = bin2hex.out;
            50: bin2hex.bin = motherboard.mrd[11:8]; tx_data = bin2hex.out;
            51: bin2hex.bin = motherboard.mrd[7:4]; tx_data = bin2hex.out;
            52: bin2hex.bin = motherboard.mrd[3:0]; tx_data = bin2hex.out;
            53: tx_data = "\n"
            54: tx_data = "m"
            55: tx_data = "w"
            56: tx_data = "d"
            57: tx_data = ":"
            
            59: bin2hex.bin = motherboard.mwd[31:28]; tx_data = bin2hex.out;
            60: bin2hex.bin = motherboard.mwd[27:24]; tx_data = bin2hex.out;
            61: bin2hex.bin = motherboard.mwd[23:20]; tx_data = bin2hex.out;
            62: bin2hex.bin = motherboard.mwd[19:16]; tx_data = bin2hex.out;
            63: bin2hex.bin = motherboard.mwd[15:12]; tx_data = bin2hex.out;
            64: bin2hex.bin = motherboard.mwd[11:8]; tx_data = bin2hex.out;
            65: bin2hex.bin = motherboard.mwd[7:4]; tx_data = bin2hex.out;
            66: bin2hex.bin = motherboard.mwd[3:0]; tx_data = bin2hex.out;
            67: tx_data = "\n"
            68: tx_data = "p"
            69: tx_data = "c"
            70: tx_data = "s"
            71: tx_data = "e"
            72: tx_data = "l"
            73: tx_data = ":"
            
            75: bin2hex.bin = debug_pcsel[3:0]; tx_data = bin2hex.out;
            76: tx_data = "\n"
            77: tx_data = "a"
            78: tx_data = "s"
            79: tx_data = "e"
            80: tx_data = "l"
            81: tx_data = ":"
            
            83: bin2hex.bin = debug_asel[3:0]; tx_data = bin2hex.out;
            84: tx_data = "\n"
            85: tx_data = "b"
            86: tx_data = "s"
            87: tx_data = "e"
            88: tx_data = "l"
            89: tx_data = ":"
            
            91: bin2hex.bin = debug_bsel[3:0]; tx_data = bin2hex.out;
            92: tx_data = "\n"
            93: tx_data = "w"
            94: tx_data = "d"
            95: tx_data = "s"
            96: tx_data = "e"
            97: tx_data = "l"
            98: tx_data = ":"
            
            100: bin2hex.bin = debug_wdsel[3:0]; tx_data = bin2hex.out;
            101: tx_data = "\n"
            102: tx_data = "i"
            103: tx_data = "n"
            104: tx_data = "b"
            105: tx_data = "u"
            106: tx_data = "f"
            107: tx_data = ":"
            
            109: bin2hex.bin = motherboard.input_buffer[15:12]; tx_data = bin2hex.out;
            110: bin2hex.bin = motherboard.input_buffer[11:8]; tx_data = bin2hex.out;
            111: bin2hex.bin = motherboard.input_buffer[7:4]; tx_data = bin2hex.out;
            112: bin2hex.bin = motherboard.input_buffer[3:0]; tx_data = bin2hex.out;
            113: tx_data = "\n"
            114: tx_data = "="
            115: tx_data = "="
            116: tx_data = "="
            117: tx_data = "="
            118: tx_data = "="
            119: tx_data = "="
            120: tx_data = "\n"
            121: tx_data = "\n"
            122: tx_data = "\n"
            
            default: bin2hex.bin = 0; tx_data = " "
        }
        
        case (state.q) {
	           States.IDLE:
	               count.d = 0
	               if (next) // TODO: make the transmit ready signal
	                   state.d = States.TRANSMIT
	            
	           States.TRANSMIT:
	               if (!tx_busy) {
	                   count.d = count.q + 1
	                   new_tx = 1
	                   if (count.q == BUFFER_LEN - 1)
	                       state.d = States.IDLE
	               }
	        }
    }
}