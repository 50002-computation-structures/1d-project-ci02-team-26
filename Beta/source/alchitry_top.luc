module alchitry_top (
    input clk,             // 25MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,            // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led[3][8],     // LEDs on IO Shield
    output io_segment[8],        // 7-segment LEDs on IO Shield
    output io_select[4],        // Digit select on IO Shield
    input io_button[5],      // 5 buttons on IO Shield
    input io_dip[3][8]       // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    
    const CLK_FREQ = $is_sim() ? 1_000 : 25_000_000 // put 1kHz for sim, 25MHz hardware and ensure that constraint did indeed specify this frequency
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        .rst(rst) {
            beta_manual_tester beta_manual(.io_button(io_button), .io_dip(io_dip), #CLK_FREQ(CLK_FREQ))
            uart_tx tx(#BAUD(1_000_000), #CLK_FREQ(100_000_000))
        }
    }
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = 8h00             // turn LEDs off
        
        usb_tx = tx.tx          // connect tx output
  	     tx.block = 0            // no flow control, do not block
        tx.new_data = beta_manual.new_tx
        tx.data = beta_manual.tx_data
        beta_manual.tx_busy = tx.busy
        
        io_led = beta_manual.io_led
        io_segment = beta_manual.io_segment
        io_select = beta_manual.io_select
        led = beta_manual.led
    }
}
