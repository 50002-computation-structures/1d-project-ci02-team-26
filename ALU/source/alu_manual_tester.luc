module alu_manual_tester#(
    CLK_FREQ ~ 1000 : CLK_FREQ > 0) 
(
    input clk,  // clock
    input rst,  // reset
    
    input a[32],
    input b[32],
    input alufn[6],
    input alu_induce_fault[2],
    
    input current_test_addr[2][4],
    
    output led[8],
    output io_led[3][8],
    output io_segment[8],
    output io_select[4],
    output out[32]
) {
    //==================== Modules ====================
    alu alu
    
    //==================== Constants ====================
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 14 // original 100MHz is 16
    
    .clk(clk) {
        .rst(rst) {
            // 7 segment display
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV))
        }
    }
    
    always {
        alu.a = a
        alu.b = b
        alu.alufn = alufn
        out = alu.out | alu_induce_fault // Induce fault by bitwise ORing the fault induction pins with the output
        
        // ALUFN table:
        // 0x00 000000: add
        // 0x01 000001: subtract
        // 0x02 000010: multiply
        // 0x18 011000: AND
        // 0x1E 011110: OR
        // 0x16 010110: XOR
        // 0x1A 011010: "A" pass through
        // 0x20 100000: Bit shift left
        // 0x21 100001: Bit shift right
        // 0x23 100011: Bit shift right with sign extension
        // 0x33 110011: compare equals
        
        // IO shield LED outputs: ALU Out, B, A, with 1 MSB and 7 LSBs
        io_led = {c{alu.out[31], alu.out[6:0]}, c{b[31], b[6:0]}, c{a[31], a[6:0]}}
        
        // LED outputs: zero, overflow, negative, fault (TODO), CLK
        led = c{5h00, alu.n, alu.v, alu.z}
        
        // Wiring the 7-segment display to ALUFN
        seg.values[3] = current_test_addr[1]
        seg.values[2] = current_test_addr[0]
        seg.values[1] = alufn[5:4] // MSBs
        seg.values[0] = alufn[3:0] // LSBs
        
        io_segment = ~seg.seg   // Selects which segment
        io_select = ~seg.sel    // Selects which digit
    }
}